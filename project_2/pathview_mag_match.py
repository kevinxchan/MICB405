"""
Script to match MAGs, their taxonomy, and KO numbers in a pathview diagram into a tab delimited table.
This script works with the sulfur metabolism pathway only. Modify the variable 'ko_path_list' to
to use it with other pathview diagrams.

python pathview_mag_match.py -a gtdbtk.ar122.classification_pplacer.tsv -b gtdbtk.bac120.classification_pplacer.tsv -k SaanichInlet_200m_all_MAGs_ORFs_ko.cleaned.txt -p prokka_to_mag_id.txt
"""

import argparse
import os
from collections import defaultdict

OUTFILE_NAME = "sulfate_metabolism.txt"

parser = argparse.ArgumentParser(description = "Script to match MAGs, their taxonomy, and KO numbers in a pathview diagram into a tab delimited table.")
parser.add_argument("-a", "--archaea-placements", required = True, help = "Path to the pplacer archaeal classifications.")
parser.add_argument("-b", "--bacteria-placements", required = True, help = "Path to the pplacer bacterial classifications.")
parser.add_argument("-k", "--ko-list", required = True, help = "Full path to the KAAS output.")
parser.add_argument("-p", "--prokka-mag-id", required = True, help = "Full path to the prokka id to MAG name file. This file is generated by the script match_prokka_mag.py.")
parser.add_argument("-o", "--output-dir", default = ".", help = "Output directory. Default: current working directory.")
args = parser.parse_args()

ko_path_list = ["K17222", "K02048", "K15551", "K15553", "K16936", "K08357",
				"K08352", "K11180", "K00640", "K03119", "K04091", "K01011",
				"K05301", "K00380", "K10150", "K00387", "K21307", "K16950",
				"K00392", "K01735", "K13811", "K00988", "K22966", "K05907",
				"K00394", "K00390", "K16952", "K17219", "K17995", "K17218",
				"K17217", "K16968", "K04091", "K17725", "K17229", "K22470",
				"K01739", "K10764", "K13811", "K01082", "K20035", "K20036",
				"K17228", "K20034", "K16954", "K00651", "K17486", "K16953",
				"K16967", "K21310", "K07306", "K16964", "K13811", "K00958",
				"K00955", "K13811", "K00955", "K00390", "K00380", "K00392",
				"K00958", "K00394", "K11180", "K17224", "K17226", "K17227",
				"K17222", "K17223", "K17225", "K22622", "K17224"]

ko_path_unique = set(ko_path_list)
ko_mag_map = defaultdict(set)
prokka_mag_map = {}
taxa_map = {}

archaea_placements = args.archaea_placements
bacteria_placements = args.bacteria_placements
ko_list = args.ko_list
prokka_mag_id = args.prokka_mag_id
output_dir = args.output_dir

with open(ko_list, "r") as f:
	for line in f:
		orf, ko = line.strip().split("\t")
		prokka_id = orf.split("_")[0]
		ko_mag_map[prokka_id].add(ko)

with open(prokka_mag_id, "r") as f:
	for line in f:
		prokka_id, bin_name = line.strip().split("\t")
		prokka_mag_map[prokka_id] = bin_name

with open(archaea_placements, "r") as f:
	for line in f:
		bin_name, tax_string = line.strip().split("\t")
		# tax_string = tax_string.replace(";", "\t")
		taxa_map[bin_name] = tax_string

with open(bacteria_placements, "r") as f:
	for line in f:
		bin_name, tax_string = line.strip().split("\t")
		# tax_string = tax_string.replace(";", "\t")
		taxa_map[bin_name] = tax_string

outfile = open(os.path.join(output_dir, OUTFILE_NAME), "w")
outfile.write("bin_name\tKOs_contained\ttaxonomy\n")

for prokka_id, ko_set in ko_mag_map.items():
	bin_name = prokka_mag_map[prokka_id]
	KOs_contained = ko_set.intersection(ko_path_unique)
	taxonomy = taxa_map[bin_name]
	if len(KOs_contained) > 0:
		KOs_contained = ",".join(KOs_contained)
		outfile.write("\t".join([bin_name, KOs_contained, taxonomy]) + "\n")

outfile.close()
